{"name":"Grunt-ftp-push","tagline":"","body":"# grunt-ftp-push\r\n\r\n> Deploy your files to a FTP server,\r\n\r\n## Getting Started\r\nThis plugin requires Grunt `~0.4.1`\r\n\r\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\r\n\r\n```shell\r\nnpm install grunt-ftp-push --save-dev\r\n```\r\n\r\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\r\n\r\n```js\r\ngrunt.loadNpmTasks('grunt-ftp-push');\r\n```\r\n\r\n## The \"ftp_push\" task\r\n\r\n### Overview\r\nIn your project's Gruntfile, add a section named `ftp_push` to the data object passed into `grunt.initConfig()`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  ftp_push: {\r\n    options: {\r\n      // Task-specific options go here.\r\n    },\r\n    files: {\r\n      // Target-specific file lists.\r\n    }\r\n  }\r\n})\r\n```\r\n\r\n### Options\r\n\r\n#### authKey\r\nType: `String` \r\nDefault: `None`\r\n\r\nName of authKey that will be used for your credentials to access the FTP server.  This name should match the name of the credentials you want to use in the `.ftpauth` file.\r\n\r\n#### host\r\nType: `String` \r\nDefault: `None`\r\n\r\nURL host of your FTP Server.\r\n\r\n#### dest\r\nType: `String` \r\nDefault: `None`\r\n\r\nDestination of where you want your files pushed to, relative to the host.\r\n\r\n#### port\r\nType: `Number` \r\nDefault: `21`\r\n\r\nPort for accessing the FTP server.\r\n\r\n### Usage Examples\r\n\r\n#### Sample .ftpauth file\r\n\r\nThis file should be named `.ftpauth` and be in the same directory as your `Gruntfile.js`.  It is a JSON object with an \"authKey\" that has a username and password for it's value. Use the following as a guide for setting up your file.\r\n\r\n```js\r\n{\r\n\t\"serverA\":{\r\n\t\t\"username\":\"myUserName@gmail.com\",\r\n\t\t\"password\":\"password123456\"\r\n\t},\r\n\t\"serverB\":{\r\n  \t\t\"username\":\"myOtherUsername@gmail.com\",\r\n  \t\t\"password\":\"12345Pass\"\r\n  \t}\r\n}\r\n```\r\n\r\n#### Default Options\r\nIn this example, the default options are used to set up the necessary components of pushing files to an FTP server. This is meant to be very basic, the files you specify in `files` will be pushed one by one to `host + dest`.\r\n\r\n```js\r\ngrunt.initConfig({\r\n  ftp_push: {\r\n        options: {\r\n          authKey: \"serverA\",\r\n          host: \"sample.server.com\",\r\n          dest: \"/html/test/\",\r\n          port: 21\r\n        },\r\n        files: [ // Enable Dynamic Expansion, Src matches are relative to this path, Actual Pattern(s) to match\r\n          {expand: true,cwd: 'test',src: ['**/*']}\r\n        ]\r\n      }\r\n})\r\n```\r\n\r\n#### Optional Options\r\nFor your options object which normally looks like this:\r\n```js\r\noptions: {\r\n\tauthKey: \"serverA\",\r\n    host: \"sample.server.com\",\r\n    dest: \"/html/test/\",\r\n    port: 21\r\n},\r\n```\r\nYou can also not create an .ftpauth file if you choose and pass the username and password in this way: \r\n```js\r\noptions: {\r\n\tusername: \"myUsername\",\r\n\tpassword: \"myPassword\",\r\n    host: \"sample.server.com\",\r\n    dest: \"/html/test/\",\r\n    port: 21\r\n}\r\n```\r\n## Dependencies\r\n\r\nThis plugin uses Sergi Mansilla's <a href=\"https://github.com/sergi/jsftp\">jsftp</a> node.js module.\r\n\r\n## Coming Soon\r\nAdding in list of files ot exclude from the upload.\r\n\r\n## Contributing\r\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\r\n\r\n## Release History\r\n_(Nothing yet)_\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}